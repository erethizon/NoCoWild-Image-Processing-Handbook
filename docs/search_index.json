[["index.html", "North Country Wild Image Processing and Uploading Handbook Preface", " North Country Wild Image Processing and Uploading Handbook Erika L. Barthelmess 2022-01-21 Preface This book is designed to guide students in the Barthelmess research lab, affectionally known as the SLU Mammal Crew, in the process of processing game camera images for upload to the zooniverse platform. It is meant as a follow along guide that lives on the web. "],["introduction.html", "Chapter 1 Introduction 1.1 Process Overview 1.2 Datasheet, File and Folder Locations", " Chapter 1 Introduction 1.1 Process Overview There are many steps required to properly process our game camera images. A workflow diagram (Figure 1.1) highlights the 9 steps that are required. Figure 1.1: Steps involved in preparing images for upload to Zooniverse 1.2 Datasheet, File and Folder Locations 1.2.1 File and folder locations With camera traps, it is possible to generate a LOT of data, very quickly. Processing those data requires a lot of R files, as well. It is very easy to accidentally overwrite files or save things on e.g. your P:/ drive or your personal computer, making it very difficult for code to run well in the future (when the next student cannot access your files). For that reason, we have taken care to organize our files very carefully. Please pay attention to the organization as described below and to apply it as you work on this project. We work on this project from three file locations (Figure 1.2): The NoCoWild folder on the t:// drive t://Bart_s04/Research_group/NoCoWild A shared RStudio project on github An external hard drive attached to the iMac in JHS 115 Figure 1.2: File and folder organization for the North Country Wild Project 1.2.2 Data sheets Blank copies of the paper data sheets we take into the field to record individual camera deployments can be found in the lab. In case you need to print more, the file is called Camera deployment sheet and there is a word copy as well as a pdf copy in the Datasheets folder in the t:drive NoCoWild folder. 1.2.3 Images Our game camera images take up a ton of hard drive space, so we keep them on an external hard drive attached to the iMac in the lab (Figure 1.2). That hard drive should never1, ever leave the lab!!! In the unusual circumstance in which you can’t work directly in the lab (thanks, COVID-19!) we have a second, back up hard drive for loan. The name of the main image hard drive is “NoCoWild”. It contains images other than our game camera projects, as well. You may add images to this hard drive, but please don’t delete images unless Erika is sitting next to you, saying “yes, it is ok to delete that” so that it can be her fault if something goes horribly wrong. 1.2.4 Data files We keep data files in two locations. Exif metadata files about sets of images (see below for explanation) as well as unmodified classification or other files from the Zooniverse platform are stored on the t:drive in the Data folder. The RStudio project is where we store some data products (after processing in R) and where we store all of the code we use for image processing and analysis. Depending on what stage of the project you are in, files may be found in the “Code”, “Data” or “Output” folders. See Organization of our project in RStudio below for details. Not ever, as in not even one single time!↩︎ "],["retrieve-sd-cards-from-cameras.html", "Chapter 2 Retrieve SD Cards from Cameras", " Chapter 2 Retrieve SD Cards from Cameras This step takes place in the field. Be sure you know which card comes from which camera and the site name. You should have a paper data sheet on which you record this information. Keep the SD cards clean and dry. "],["organize-images-on-the-external-hard-drive.html", "Chapter 3 Organize images on the external hard drive 3.1 Step 1: Archiving the files 3.2 Step 2. Copying and renaming the files 3.3 Summary", " Chapter 3 Organize images on the external hard drive Back in the lab, download all of the photos from each SD card onto the external hard drive called “NoCoWild”. Use the iMac which has a built in SD card reader on the back side of the monitor. There are two main steps to organizing the photos: Archiving the files in the Raw folder Copying and renaming the files in the Processed folder Creating the Processed folder Renaming image files within subfolders of the Processed folder 3.1 Step 1: Archiving the files On the external hard drive (called “NoCoWild”), we create a folder called Raw within which we keep a set of original images that we never2 modify. Every set of images from a single SD card in a single camera will be collected together into a unique folder. We organize folders by calendar year, and usually also by round number (a round is a single phase of camera deployments) as well as camera location (e.g. forest name). An example is shown in figure 3.1. Depending on the year, the folder names may be slightly different than what you see in fig. 3.1 due to differences in study design in a particular year. Be sure to check with Erika to make sure you know what file and image naming conventions are currently in use. Figure 3.1: Organization of the “Raw” folder containing the original, unmodified images files. Within the folder for a given year, we create the folder called Raw. Then within the Raw folder we create, as needed, a folder for each site, and within the folder for each site, a folder for each round (if needed). We do not make specific site folders unless we have multiple cameras deployed at the same site at the same time. Then we create the lowest-level folders, single folders for each game camera &amp; SD card combination (Figure 3.1). You may need to create these folders when you first upload the data. Please use leading zeros and make sure every camera number is recorded as 3 digits and every SD card number is recorded as three digits. For example, for images from Camera 24 SD card 5, you would have C024_SD005. As a reminder, all photos inside the Raw folder are the originals and should NEVER BE ALTERED3. 3.2 Step 2. Copying and renaming the files There is a great deal of processing we need to do in order to prepare our images for upload to the Zooniverse. For example, every game camera will name all of the images in the same way, so it is possible to have multiple images named, for instance, “IMG_0001.jpg”. We will thus rename all images so that each image name reflects the camera, SD card, round and site information that is associated with each image. To do so, once we have all of the photos archived in the “Raw” folder, we copy them to another folder called “Processed” and then rename each image file according to its camera and SD card number and, in some cases, round and/or site. An example of the final product is shown in figure 3.2. It is easiest to complete these steps on the iMac in the lab. Figure 3.2: “Raw” and “Processed” folders and example file names within each. 3.2.1 Create the Processed folder To create the Processed folder, first copy the “Raw” folder by right-clicking on the folder name and choosing “Copy.” Next, paste it inside of the “2021 Game Camera Photos” folder (or similar) by right-clicking inside of the destination folder and choosing “Paste Item.” Now rename the folder you just pasted by right-clicking on the folder, choosing “Rename” and then changing the name to “Processed”. 3.2.2 Rename image files within each subfolder Now that we have the Processed folder, along with all of its subfolders, we can undertake the process of renaming image files. Note that, depending on what other members of the lab have already done, you may only do this step for a single folder of images, or you may do this step for several folders of images. In either case, you will work on one folder of images at a time, repeating the following steps for each folder as you work. We rename each image file so that the image name is a string of characters containing some combination of camera, SD card, Round, and possibly site. All of the pictures in the single folder will receive the same code, because they come from the same Camera and SD card combination. The flow chart for determining the proper code is as shown in Figure 3.3. Figure 3.3: Image naming conventions depending on camera number, SD card number, and possibly deployment round and site. Once you have your folder pasted into the “Processed” folder and appropriately renamed, follow these steps to rename the files: Double click on the folder containing the photos you wish to rename. You will see that the default file names are assigned by the camera, are totally boring, and could be easily confused with other image files from another camera (figure 3.4). Figure 3.4: File folder open showing original bland, non-informative file names. We need unique names for images that include reference to camera and SD card number as well as, in some cases, round and/or site. Now select all of the images in the folder. The fastest way is to use command-A. With all of the images selected, right-click the mouse and choose Rename (figure 3.5) Figure 3.5: Right-click to open the “Rename files” dialog box. A new dialog box will open in which you can find and replace a string in the file name (figure 3.6). Make sure that “Replace Text” is chosen in the drop down list Enter “IMG” in the “Find” box Enter a string that includes camera number, SD card number, site code (if applicable, Table 1) and round code (if applicable) Make sure that the example shows appropriate underscores and includes an original image number (figure 3.6) In this example, the images all came from Donnerville State Forest and are from Round 1. They are from camera 43, SD card 93. Hence “C043_SD093_DON_R1” is typed into the “Replace with” box. Figure 3.6: Find the “IMG” part of each file name and replace it with the appropriate combination of camera, SD card, site and round codes. Make sure that the example looks correct before choosing “rename.” If you forget to add an element to a text name, (e.g. you forget to put the site code or round number), you can use the same process as in Step 4 above to rename the files again, but this time, put the incorrect parts of the filename in the Find search box and the new, corrected string in the Replace text box (figure 3.7). Figure 3.7: How to repair new image file names if you make a mistake in Step 4. When you are finished, you should see that your folder includes a set of renamed image files (example in figure 3.8). Figure 3.8: View of folder containing correctly re-assigned image file names. Repeat these steps to save and rename any folders of images you import to the Processed folder on the hard drive. 3.3 Summary At the end of the photo organization step of our workflow, you will have a set of subfolders containing original, unmodified image files in the Raw folder and a second set of subfolders in the Processed folder containing the modified images (figure 3.9) Figure 3.9: Summary view of Raw and Processed folder organization on the external hard drive. Not ever, as in not even one single time!↩︎ Nope - don’t even think about altering the files in the Raw folder!!!↩︎ "],["add-copyright-and-read-exif-data-from-images-to-csv-via-exiftool.html", "Chapter 4 Add copyright and read EXIF data from images to .csv via exifTool 4.1 Finding your way around the mac terminal (command line interface) 4.2 Using ExifTool 4.3 Summary", " Chapter 4 Add copyright and read EXIF data from images to .csv via exifTool Any time an image is made with a digital camera (including your phone camera, our game cameras, etc.), regardless of make, data are embedded in the image file. You never see these data unless you look for them. The embedded information is called “EXIF data” where EXIF stands for “exchangeable image file format” and it includes all of the metadata associated with an image, such as the exposure time, ISO, etc. Programs such as Adobe Lightroom can be used to view the exif data. How much exif data is collected depends on the camera and its features. For example, a camera with built in gps will encode the location where the photo was taken. If you’re not into digital photography, you may not be aware that this information is stored with every digital image. We will need exif data to be able to assign images to proper events based on their time stamp. We will also add exif data to our images by adding copyright information. We will use a free tool called “ExifTool” to do so. 4.1 Finding your way around the mac terminal (command line interface) Use of ExifTool (and another tool called “ImageMagick” we will use in a later step) requires use of the command-line interface. On a mac, this interface is called the “terminal” and is also sometimes referred to as “bash.” To access the terminal on a mac, you go to the search bar (the tool that looks like a magnifying glass) in the upper right of the screen and search “terminal” (fig 4.1). Once you see the terminal icon, click on it to open the terminal interface. Figure 4.1: Using spotlight search on a mac to open the terminal interface. Table 4.1 shows a list of some of the common command-line functions. Command Purpose cd directory changes path from working directory to named directory where “directory” is the name of the directory you wish to navigate to. cd .. changes your directory to the parent directory from the one you are currently in (note the space before the ..) ls lists all visible files in your directory pwd lists path of your current directory (“print working directory”) . vs .. “.” Specifies the directory you are currently in, whereas “..” specifies the parent directory The terminal window presents a way to move around directories (folders) on your computer, run software, and execute other commands without using the “graphical user interface”, or “GUI” that you are most familiar with (the Menu-driven system where you click with your mouse to make things happen). There are several different ways in which we must use the terminal for image processing. 4.1.1 Note about directory names The command-line has trouble understanding folder names if there is a space in the folder name. For example, if I have a folder called Card 4, I specify it by writing Card\\ 4 The \\ tells the computer that the name is continuing. The space followed by the 4 tells it that these are the remaining parts of the directory name. Avoid problems with the terminal by using \\ or not otherwise including spaces in filenames. Also, this guide is written assuming you are using the iMac in the Barthelmess research lab. If you are trying to use these commands on another mac, there may be slight differences. If you are trying to use these commands on a PC, you will find that the PC operating system uses different characters to indicate a file path. Thus, this code will get you on the right path on a PC, but will not be sufficient as is. A neat trick for changing the directory folder path is to drop the folder icon (not from the terminal) onto the \\$ prompt inside of the terminal. The terminal will then indicate the full path to that directory. Try this: cd \\[drop folder with files here after you type cd\\] Terminal will change the working directory to the correct file path! 4.2 Using ExifTool 4.2.1 Running ExifTool via the terminal. Running ExifTool is fairly straightforward, as long as you don’t get too bogged down in command-line commands, which can be confusing. To start ExifTool, type “exiftool” after the prompt on the command line. If the computer tells you that ExifTool does not exist, see Appendix 1. Additional Details and code snippets, for instructions on how to install ExifTool. If ExifTool is installed, the manual (called the “man” or “manpage” in command line talk) window will open orienting you to features of the program. To get out of that window and back to the command-line, type “Q”. Scroll through manpage using scroll bar Exit the man by typing q and return. 4.2.2 Viewing exif data on a single image In the terminal, change to the directory that contains the files you want information from. You can easily do this by first typing cd after the terminal prompt and then dragging the folder icon from the folder on the NoCoWild hard drive that you wish to move to onto the terminal prompt (fig. 4.2). Figure 4.2: Changing directories and modifying exif data using the terminal interface. A shows in yellow the root directory terminal prompt. B shows in yellow the text that is automatically added after cd when you drop a folder icon onto the terminal window following the cd text. C shows in yellow the new terminal prompt, reflecting the directory in which the computer is working. Note the name of an image in the directory. Then, in the terminal at the command-line prompt (usually a \\$ or \\&gt;), type exiftool imagename.jpg where imagename.jpg is the name of the file you want data from. The computer will then display the information you seek. An example of output is in Figure 12 below. Figure 13. Example output from viewing exif data from a single image with exiftool. You will use this method to ensure that copyright information is properly added. 4.2.3 Using ExifTool to add copyright information to the images. To add copyright information to the images, make sure you are in the folder that contains the images you wish to add copyright information, and type the following at the command-line: $ exiftool -overwrite_original -rights=&quot;Copyright&quot; -CopyrightNotice=&quot;Bart Lab and Nature Up North&quot; *.JPG (put this all on one line) This basically says to the computer: “Open exiftool, and overwrite new information into the original metadata. Add a field called ‘Copyright’ and fill the field with”Bart Lab and Nature Up North”. Do this for all of the files in the folder.” Once you have run this code, examine the exif data for a few of the images in the folder using the method described for viewing exif data for a single image above and make sure the copyright information is present. 4.3 Summary At the end of the copyright addition step, each folder of images will have the appropriate copyright information embedded into the image exif data using ExifTool. We take this step so that if anyone downloads one of our images from the zooniverse and tries to use it commercially, we have evidence that the image is ours. "],["resize-images-for-upload-to-zooniverse-via-imagemagick.html", "Chapter 5 Resize images for upload to Zooniverse via ImageMagick 5.1 Resizing images 5.2 Summary", " Chapter 5 Resize images for upload to Zooniverse via ImageMagick The Zooniverse sets a maximum image size of 1MB. Our cameras take higher resolution pictures, generally in the realm of 3.5MB. Thus, we need to batch resize the photos for upload to the Zooniverse. To do so, we use another command-line software called ImageMagick. We have installed ImageMagick on the iMac in the lab. However, if you wish to install it on your own mac, see Appendix 1. Additional Details and code snippets, for instructions on how to install “Homebrew”, a package manager for the Mac, and then use Homebrew to install imagemagick. 5.1 Resizing images With imagemagick installed, open a terminal window and move to the directory with the images you wish to resize (see chapter 4 to learn more about how move around the terminal). Once you have changed directories to the desired folder, type the following line of code in the terminal: magick mogrify -resize \"2000&gt;\" -define jpeg:extent=900kb *.JPG Note that the .JPG is case-sensitive. If the images are labeled .jpg, then type that instead. This line of code basically says “Turn on imagemagick and use it to resize photos. Their maximum width or height (whichever is larger) will be 2000 pixels. Their final size should be not greater than 900kb. Do this for all of the images (the *.JPG where * is a wildcard) in the folder. Resizing takes a long time. For example, to run about 4000 photos took 1hr and 10 minutes. Proceed through all of the folders, resizing images until all images in the Processed subfolders are less than 1MB in size. 5.2 Summary At the end of the image resize step, each folder of processed images will have a set of images each less than 1kb in size. "],["use-exiftool-to-bulk-extract-metadata-from-images.html", "Chapter 6 Use ExifTool to bulk-extract metadata from images 6.1 Write csv from the parent directory 6.2 Assign the csv a correct file name 6.3 Moving the file to the correct location 6.4 Summary", " Chapter 6 Use ExifTool to bulk-extract metadata from images Now that we have added copyright information and resized all of our images, we need to create a data file with information about each image we plan to upload to the zooniverse.Exiftool will allow you to batch extract data from a whole folder of images and save it to a .csv file. We need this .csv for use in R. For more information about the following steps, consult this series of tutorials on line. Video 4 in the series is especially helpful. We will again be using terminal and the command-line interface. We will generate the csv from the parent directory (the one containing the directory of images).We do so to prevent having anything in our image folder other than images (i.e. the new .csv file gets saved one level above the folder with images). 6.1 Write csv from the parent directory You should create the csv by specifying the folder containing the images for which you want the data, without being in that folder. From the folder with the images, use cd .. to navigate to the parent folder that contains the image folder. For the purpose of this example, assume that all of the images are in a folder called Card_4 If you haven’t already done so, navigate in the terminal to the parent directory that holds Card_4. Then write the following in the command line: $ exiftool –common -csv Card_4 correctfilename.csv This code tells the computer to “Open exiftool, select the”common” (rather than all) the exif data, and make a csv using all of the images in the Card_4 folder and save it to a file called correctfilename.csv in the parent directory. Your exiftool command will do several things: It will open the directory with the images It will examine and extract the common pieces of exif information from each image and store them in a csv file and It will save the csv to the parent, rather than the child directory. 6.2 Assign the csv a correct file name In the code above, we used correctfilename.csv as a placeholder file name for the csv file that we were making with exifTool. In reality, we want to use meaningful file names whenever we create files. Keep in mind that the file is going to be moved, stored, and opened again, perhaps years later. We need to know what it is! Thus we will use a meaningful file naming convention. We’d like to know, just from the file name, several things: What the file contains (exif data) What set of images the file is for (timeframe and round, if relevant). Recall that the camera and sd card names are already embedded in the image names, so we don’t need that info in the file name. So for data from the fall 2021 camera trapping season, we would use the following components in the file name: “exif” to tell us that it contains exif data “2021” to tell us the year it is from “R1” or “R2” etc. to tell us the round of deployments The name of the folder containing the images it is referencing. Thus, the line of code we would use to create the exif metadata file from the parent folder would be: $ exiftool --common -csv Card_4 exif_2021_R1.csv 6.3 Moving the file to the correct location The last step in all of this image processing is to copy the exif metadata file you just created to the main NoCoWild Data subfolder. Navigate to t://Bart_s04/Research_group/NoCoWild/Data/exif_metadata and save a copy of the file you just created there. 6.4 Summary By the end of this step, you will have created a .csv file in the parent directory to the folder containing all of the images you are preparing. You will have saved a copy of that .csv file in the designated location the t:// drive. "]]
