[["index.html", "North Country Wild Image Processing and Uploading Handbook Preface", " North Country Wild Image Processing and Uploading Handbook Erika L. Barthelmess 2024-05-14 Preface This book is designed to guide students in the Barthelmess research lab, affectionally known as the SLU Mammal Crew, through the steps required to process game camera images for upload to the zooniverse platform. It is meant as a follow along guide that lives on the web. "],["introduction.html", "Introduction", " Introduction Managing thousands of game camera images and extracting data from them is a complex and somewhat daunting task. Keeping track of them over time, so that data between years can be examined and so that new questions can be asked of the data, requires careful thought and attention to detail. This book is a guide to managing those data. Ultimately, it will also present some basics on how to extract meaningful information from the data once images have been classified on the Zooniverse. Erika has been working with SLU Mammal Crew alum Brett Ford, a data scientist at Embark Vet to streamline the process of managing our camera trap data. This book is organized into three parts. Part I includes all of the general information about how files are organized for the project and is required reading for everyont. Part II presents the preferred approach for working with game camera images developed with Brett. This approach uses a streamlined set of Python and R tools and reduces the possibility of errors. Part III presents a second, much more labor intensive and possibly error-prone approach. It is the approach that we used prior to working with Brett and is documented simply in case need arises. Most readers should read through Parts I and II of the book. "],["Ch1-overview.html", "Chapter 1 Process Overview 1.1 Datasheet, File and Folder Locations", " Chapter 1 Process Overview There are many steps required to properly process our game camera images. A workflow diagram (Figure 1.1) highlights the 9 steps that are required. Figure 1.1: Steps involved in preparing images for upload to Zooniverse 1.1 Datasheet, File and Folder Locations 1.1.1 File and folder locations With camera traps, it is possible to generate a LOT of data, very quickly. Processing those data requires a lot of R files, as well. It is very easy to accidentally overwrite files or save things on e.g. your P:/ drive or your personal computer, making it very difficult for code to run well in the future (when the next student cannot access your files). For that reason, we have taken care to organize our files very carefully. Please pay attention to the organization as described below and to apply it as you work on this project. We work on this project from three file locations (Figure 1.2): The NoCoWild folder on the t:// drive t://Bart_s04/Research_group/NoCoWild A shared RStudio project on github An external hard drive attached to the iMac in JHS 115 Figure 1.2: File and folder organization for the North Country Wild Project 1.1.2 Data sheets Blank copies of the paper data sheets we take into the field to record individual camera deployments can be found in the lab. In case you need to print more, the file is called Camera deployment sheet and there is a word copy as well as a pdf copy in the Datasheets folder in the t:drive NoCoWild folder. 1.1.3 Images Our game camera images take up a ton of hard drive space, so we keep them on an external hard drive attached to the iMac in the lab (Figure 1.2). That hard drive should never1, ever leave the lab!!! In the unusual circumstance in which you can’t work directly in the lab (thanks, COVID-19!) we have a second, back up hard drive for loan. The name of the main image hard drive is “NoCoWild”. It contains images other than our game camera projects, as well. You may add images to this hard drive, but please don’t delete images unless Erika is sitting next to you, saying “yes, it is ok to delete that” so that it can be her fault if something goes horribly wrong. 1.1.4 Data files We keep data files in two locations. Exif metadata files about sets of images (see below for explanation) as well as unmodified classification or other files from the Zooniverse platform are stored on the t:drive in the Data folder. The RStudio project is where we store some data products (after processing in R) and where we store all of the code we use for image processing and analysis. Depending on what stage of the project you are in, files may be found in the “Code”, “Data” or “Output” folders. See Organization of our project in RStudio below for details. CRITICAL!↩︎ "],["get-sd-cards.html", "Chapter 2 Retrieve SD Cards from Cameras", " Chapter 2 Retrieve SD Cards from Cameras To retrieve the SD cards means you need to visit the cameras in the field. Those trips entail either collecting the SD card and the camera, or visiting the camera to put in fresh batteries and a fresh SD card (figure 2.1). Figure 2.1: Peyton Schmitt (2023) deploying a camera Typically, when you pick up a camera, you will bring the data sheet into the field that was filed out when each camera was first deployed and will record the date upon which the camera was “retrieved” as well as fill in some information about battery charge at retrieval, whether the camera was working at retrieval, and step through a check-list of “to-dos” when you are in the field. Alternatively, if you are just swapping batteries and swapping in a new SD card but leaving the camera in place, you will bring the old data sheet, record the date on which the SD card was retrieved, and fill out a new data sheet about the date on which the new SD card was placed. Regardless, it is critical that you keep track of which SD card comes from which camera and the site name (this information must be recorded on your data sheet!2. You should have a paper data sheet on which you record this information. Keep the SD cards clean and dry. When you return to the lab, you will use the card reader attached to the iMac to upload the images. CRITICAL!↩︎ "],["using-terminal.html", "Chapter 3 Using the “terminal” (command line interface) on a mac 3.1 Introduction 3.2 Accessing the terminal 3.3 Note about directory names 3.4 Summary", " Chapter 3 Using the “terminal” (command line interface) on a mac 3.1 Introduction Now that we have our images collected from the field, it is time to prepare them for upload to the zooniverse platform for the species identification step. Game cameras collect a LOT of images, and we need to basically “curate” these images so that they are easy to keep track of. The steps involve: Copying the images from the SD card into a “Raw” folder on the hard drive Copying, renaming, and resizing the images and placing them in a “Processed” folder on the hard drive. Generating a metadata file about the processed images In the past, each of these steps involved a lot of pointing and clicking and had lots of opportunity for user error. Since then, lab alumn Brett Ford has written a series of Python scripts that automate these tasks and reduce the potential for error. To run the python scripts, you will need to use the computer’s command-line interface, also known as the “terminal” or “bash.” The rest of this chapter helps you learn how to navigate around the terminal on a mac. 3.2 Accessing the terminal To access the terminal on a mac, go to the search bar (the tool that looks like a magnifying glass) in the upper right of the screen and search “terminal” (figure 3.1). Once you see the terminal icon, click on it to open the terminal interface. Figure 3.1: Using spotlight search on a mac to open the terminal     Table 3.1 shows a list of some of the common command-line functions. Command Purpose cd directory changes path from working directory to named directory where “directory” is the name of the directory you wish to navigate to. cd .. changes your directory to the parent directory from the one you are currently in (note the space before the ..) ls lists all visible files in your directory pwd lists path of your current directory (“print working directory”) . vs .. “.” Specifies the directory you are currently in, whereas “..” specifies the parent directory The terminal window presents a way to move around directories (folders) on your computer, run software, and execute other commands without using the “graphical user interface”, or “GUI” that you are most familiar with (the Menu-driven system where you click with your mouse to make things happen). There are several different ways in which we must use the terminal for image processing. 3.3 Note about directory names The command-line has trouble understanding folder names if there is a space in the folder name. For example, if I have a folder called Card 4, I specify it by writing Card\\ 4 The \\ tells the computer that the name is continuing. The space followed by the 4 tells it that these are the remaining parts of the directory name. Avoid problems with the terminal by using \\ or not otherwise including spaces in filenames. Also, this guide is written assuming you are using the iMac in the Barthelmess research lab. If you are trying to use these commands on another mac, there may be slight differences. If you are trying to use these commands on a PC, you will find that the PC operating system uses different characters to indicate a file path. Thus, this code will get you on the right path on a PC, but will not be sufficient as is. A neat trick for changing the directory folder path is to drop the folder icon (not from the terminal) onto the \\$ prompt inside of the terminal. The terminal will then indicate the full path to that directory. Try this: cd [drop folder with files here after you type cd] Terminal will change the working directory to the correct file path! 3.4 Summary The “terminal” interface is one of the main ways we will run the tools we need for managing our images. You should become comfortable working with the terminal in order to proceed with the next chapters. "],["hard-drive-org.html", "Chapter 4 Hard Drive Organization 4.1 Introduction 4.2 Hard Drive Organization 4.3 Summary", " Chapter 4 Hard Drive Organization 4.1 Introduction As you saw in Chapter 1 in the Process Overview diagram,once we have collected the SD cards from the field, we have a lot of image processing to do. There are two main steps to organizing the photos: Archive the files in the Raw folder Copy, rename, add copyright info, resize images and store in the Processed folder Because there are a lot of steps, there are also many opportunities to introduce error. One way we can reduce the likelihood of error is by automating much of the process. To understand how the processing will work, you first need to understand how we organize our files on the external hard drive. 4.2 Hard Drive Organization When you click on the NoCoWild hard drive icon, you will see something that looks more-or-less like figure 4.1. We create a new folder for each academic year (so, for example, 2022_Game_Camera_Photos has images from the 2022-2023 academic year). Figure 4.1: Higher level view of the NoCoWild hard drive organization Within any particular year’s folder, we create a “Raw” folder and a “Processed” folder, and within each of those we create a folder for each Camera-SD card combination (figure 4.2). Sometimes you will also see an extra folder or file within the Processed folder that are by-products of uploading images to the Zooniverese platform. For example, in figure 4.2, you see a folder called “21-Oct-Upload” and a file called “exif_2022_…upload.csv”. Figure 4.2: Processed and Raw folders with subfolders for each camera + sd card combination Figure 4.3 compares the Raw and Processed image folders for Camera-SD card C023_SD162. Notice in A that the folder just contains the original, raw images, named with whatever names were assigned by the game camera and at the size that was captured by the game camera. Contrast that with B and see that in the Processed folder for this same camera, the images have all been renamed to include the camera-sd card and date that the picture was taken. The images have also been resized to be smaller than 1MB for upload to Zooniverse. Figure 4.3: Comparison of the Raw and Processed images for Camera-SD card C023_SD162 4.3 Summary The “terminal” interface is one of the main ways we will run the tools we need for managing our images. You should become comfortable working with the terminal in order to proceed with the next chapters. ## here() starts at /Users/barthelmess/Library/CloudStorage/Dropbox/R/NoCoWild-Image-Processing-Handbook "],["using-scripting.html", "Chapter 5 Introduction to scripting 5.1 Introduction 5.2 Python Scripts 5.3 Script subcommands 5.4 Running the Scripts 5.5 Summary", " Chapter 5 Introduction to scripting 5.1 Introduction Now that you understand how we organize our files, it is time to learn how to use our python scripts to automate the image processing steps. For many people, this will be the most confusing part of the process, so please read the instructions carefully. 5.2 Python Scripts Notice the expanded folder called North-Country-Wild in figure 5.1. It contains the PythonScripts folder that you will need to access to run our scripts. Brett has created a python script called upload_and_process_images.py located in the folder called PythonScripts inside of th North-Country-Wild folder in the root directory of the NoCoWild hard drive (figure 5.1). The other two scripts in the folder are used for pushing files to the zooniverse once they are processed. Figure 5.1: Python Script files inside of the PythonScripts folder To use the script you will need to:{#use-scripts} Open a terminal window (See “Accessing the terminal” in Chapter 3 for a refresher). From the terminal, cd into the PythonScripts folder by typing cd on the command line and then dragging the folder icon onto the terminal. Hit return when finished. To access the script and learn about its subcommands, type python3 upload_and_process_images.py -h. Text with information about the script subcommands will display in the terminal window because you added -h after the name of the script (figure 5.2). Figure 5.2: Terminal window showing location in PythonScripts folder and subcommands for the upload_and_process_images.py script 5.3 Script subcommands You can see that there are three possible subcommands, each of which take several different arguments (Table 5.1). Table 5.1: List of python script subcommands and their arguments Subcommand Arguments change_file_size_and_copyright This subcommand takes as arguments the path to the processed images which have already been renamed and resizes them and adds copyright information copy_raw_images_change_file_size_and_copyright This subcommand takes as arguments the camera number and sd card number, each as 3-digit integers, and copies, resizes, and adds copyright information to the images. If a 3-digit integer is not provided, the script will automatically add leading zeros. completely_process_images_from_sd_card This subcommand takes a number of different arguments (use -h after the subcommand to see them) and completely processes images from the sd card to separate directories (aka “folders”) for the raw and processed images. Further, most of these subcommands take arguments, which are typed into the terminal as --argument-name followed the required information. For example, Table 5.2 shows the arguments that are required by the completely_process_images_from_sd_card subcommand. Table 5.2: List of arguments required by the completely_process_images_from_sd_card subcommand Argument.name Description h or help shows the help menu memory-card-path indicate the full path to the SD card on the computer; you can drag the folder onto the terminal path-to-raw-images indicate the full path to the Raw image folder where the Raw images should be deposited; you can drag the folder onto the terminal path-to-processed-images indicate the full path to the Processed image folder where the processed images will be placed; you can drag the folder onto the terminal camera-number indicate the camera number that the memory card is associated with for this deployment as an integer not exceeding 3 digits; if you forget to include 3 digits the script will take care of it sd-card-number indicate the sd card number that the images come from as an integer not exceeding 3 digits; if you forget to include 3 digits the script will take care of it 5.4 Running the Scripts Before you can begin using the scripts to process image files, you need to create empty folders for the camera-sd card combination in the Raw and Processed folders for the given year as shown in Chapter 4 Section 4.2 Hard Drive Organization. Please be careful in naming these folders so that the folder names are of the form C***_SD*** where *** represents the 3-digit camera number (including a leading zero) and the 3-digit SD card number (including a leading zero), respectively. 5.4.1 Completely process images from sd card Most often, you will want to completely process all of the images on an SD card. As a reminder, in this process, running the python script correctly will: Copy all of the images from the SD card to the correctly labeled folder in the Raw image directory Copy all of the images from the Raw folder to the correct directory in the Processed folder Rename all of the images in the correct Processed folder so that the image name includes the camera-sd card as well as the time stamp the image was made, in addition to the original image name Resize the all of the images to just under 1MB in size for later upload to the zooniverse Add a copyright field with the words “Barthelmess Lab and Nature Up North” to all of the image exif data. Let’s assume for demonstration purposes that I have a number of images on an SD card in a folder called Camera and let’s further assume that the SD card was number 001 and the camera was number 001. I therefore have created a folder called C001_SD001 in both the Raw and Processed folders on the hard drive. Notice what they look like prior to processing the scripts in Figure 5.3. Figure 5.3: Raw and Processed folders for a demonstration set of images prior to image processing Specific instructions: Obtain a paper copy of the data sheet associated with the specific deployment you intend to process and note the Camera number and SD card number. Open the correct year’s folder on the NoCoWild hard drive. Create a new, empty folder named as indicated above in the Raw folder and in the Processed folder. Place the SD card into the card reader attached to the imac. Open a terminal session and cd to the PythonScripts folder (inside of the North-Country-Wild folder on theNoCoWild` hard drive). Refresh your memory about how here Paste the following line of code at the cursor python3 upload_and_process_images.py completely_process_images_from_sd_card Do not press return after pasting Paste the following line of code at the cursor --memory-card-path followed by a space and then drag the folder of images on the SD card onto the terminal Do not press return after pasting Paste the following line of code at the cursor --path-to-raw-images followed by a space and then drag the appropriate Raw image folder onto the terminal. Do not press return after pasting Paste the following line of code at the cursor --path-to-processed-images followed by a space and then drag the appropriate Processed image folder onto the terminal. Do not press return after pasting Paste the following line of code at the cursor --camera-number followed by a space and then type the 3-digit camera number including a leading zero Do not press return after pasting Paste the following line of code at the cursor --sd-card-number followed by a space and then type the 3-digit number for the SD card including a leading zero Hit Return. If you have no typos or other errors, the script will immediately begin processing the images. Figure 5.4 shows the terminal window for steps 5-11 above. The terminal commands are highlighted in yellow. Figure 5.4: Terminal window showing a complete script for processing images from a SD card. The terminal commands are highlighted in yellow and the output, showing that the script ran, follows below the terminal commands. After the script ran, the resulting contents of the Raw and Processed image folders for this demonstration is shown in Figure 5.5. Figure 5.5: The same Raw and Processed folders for a demonstration set of images after image processing 5.4.2 Running other subcommands The process for running the other two subcommands, copy_raw_images_change_file_size_and_copyright and change_file_size_and_copyright is very similar. You will need to specify file paths and other arguments. But the overall process of running the scripts is the same: python3 upload_and_process_images.py followed by the appropriate subcommand, followed by each argument for the subcommand, with “answers” (e.g. file path, camera or sd card number) specified Remember, you can use the -h argument after a subcommand to open the help information in your terminal window to learn how to specify the arguments that go with a particular subcommand. 5.5 Summary Managing game camera images is a complex process. Images have to be associated with specific cameras and SD cards, have to be transferred to new folders, and have to be resized and renamed. Though the steps in this chapter may seem complex, imagine if you had to go through each of these steps for every individual image! There would be so many opportunities to introduce error. Instead, we are using a series of python scripts to streamline the process and reduce the propegation of errors in the data set. "],["extract-metadata-from-images.html", "Chapter 6 Use ExifTool to bulk-extract metadata from images 6.1 Determine the correct file name for the csv you will create 6.2 Moving the file to the correct location 6.3 Summary", " Chapter 6 Use ExifTool to bulk-extract metadata from images Now that we have added copyright information and resized all of our images, we need to create a data file with information about each image we plan to upload to the zooniverse.Exiftool will allow you to batch extract data from a whole folder of images and save it to a .csv file. We need this .csv for use in R. For more information about the following steps, consult this series of tutorials on line. Video 4 in the series is especially helpful. We will again be using terminal and the command-line interface. We will generate the csv from the parent directory (the one containing the directory of images).We do so to prevent having anything in our image folder other than images (i.e. the new .csv file gets saved one level above the folder with images). 6.1 Determine the correct file name for the csv you will create In the code above, we used correctfilename.csv as a placeholder file name for the csv file that we were making with exifTool. In reality, we want to use meaningful file names whenever we create files. Keep in mind that the file is going to be moved, stored, and opened again, perhaps years later. We need to know what it is! Thus we will use a meaningful file naming convention. We’d like to know, just from the file name, several things: What the file contains (exif data) What set of images the file is for (timeframe and round, if relevant). Recall that the camera and sd card names are already embedded in the image names, so we don’t need that info in the file name. So for data from the fall 2021 camera trapping season, we would use the following components in the file name: “exif” to tell us that it contains exif data “2021” to tell us the year it is from “R1” or “R2” etc. to tell us the round of deployments The name of the folder containing the images it is referencing. ## Write csv from the parent directory {#write-csv-from-parent} You should create the csv by specifying the folder containing the images for which you want the data, without being in that folder. From the folder with the images, use cd .. to navigate to the parent folder that contains the image folder. For the purpose of this example, assume that all of the images are in a folder called C001_SD001 If you haven’t already done so, navigate in the terminal to the parent directory that holds Card_4. Then write the following in the command line: $ exiftool -common -csv C001_SD001 &gt; correctfilename.csv This code tells the computer to “Open exiftool, select the”common” (rather than all) the exif data, and make a csv using all of the images in the Card_4 folder and save it to a file called correctfilename.csv in the parent directory. Your exiftool command will do several things: It will open the directory with the images It will examine and extract the common pieces of exif information from each image and store them in a csv file and It will save the csv to the parent, rather than the child directory. Thus, the line of code we would use to create the exif metadata file from the parent folder would be: $ exiftool -common -csv Card_4 &gt; exif_2021_R1.csv 6.2 Moving the file to the correct location The last step in all of this image processing is to copy the exif metadata file you just created to the main NoCoWild Data subfolder. Navigate to t://Bart_s04/Research_group/NoCoWild/Data/exif_metadata and save a copy of the file you just created there. 6.3 Summary By the end of this step, you will have created a .csv file in the parent directory to the folder containing all of the images you are preparing. You will have saved a copy of that .csv file in the designated location the t:// drive. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
